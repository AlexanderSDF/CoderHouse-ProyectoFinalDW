## -------------------------MAPS Y MAPGET---------------------------------
#### se utilizan para crear una clase y repetirla en código.  
#### sirve para utilizar solamente lo que se necesita del map.

#### de definen el map $estilo: entre paréntesis y con comas excepto la ultima variable
### $estilo: (color:#3673D9, centro: center)<!-- crear el map -->
#### En este ejemplo se llama al mapa $estilo en un div utilizando: 
### background-color: map-get($estilo, color) <!-- llamar el map -->
#### mapget lo llama, entre paréntesis va primero el elemento a modificar en este ejemplo bgcolor.
#### Seguido de map-get, parentesis y el nombre del map seguido de $ y luego separado por coma va el valor a llamar ej color(que en el ejemplo tiene un color#3673D9)
<!-- SE DECLARA -->
$estilos: (
  color: #3673D9,
  centro: center,
  upper: uppercase,
  tFuente: 35px,
  1rem : 1rem
);
<!-- SE APLICA -->
div {99
  background-color: map-get($estilos, color);
  text-align: map-get($estilos, centro);
  padding: map-get($estilos, 1rem);
  font-size:map-get($estilos, tFuente);
  color: white;
## -------------------------------- EXTEND ----------------------------------
#### Para extender de forma IDENTICA una clase ya creada, a otro elemento.
#### en este ejemplo se crea un extend para aplicar una animacion a una imagen 
#### para repetirla en todas las imagenes a aplicar el efecto

#### se declara el extend:
### %nombreDelExtend{propiedad:valor}
#### se aplica el extend llamandolo  dentro del elemento de la siguiente forma:
### @extend %nombreDelExtend;
## en el ejemplo se aplica una transition de 2s para modificar la del extend de .6
<!-- SE DECLARA -->
%zoomImagen {
  transform: scale(1.5);
  transition: .6s;
}
<!-- SE APLICA -->
div {
  .imgPinguli {
    &:hover {
      @extend %zoomImagen;
      transition: 2s;
    }                  
  } 
}
## ----------------------------------MIXIN ---------------------------------
#### Para extender de forma DIFERENTE una clase ya creada, a otro elemento mediante argumentos.

###   -------MIXIN CON PARÁMETRO----------
#### con parametro para llamar al atributo y colocarle  un valor individual
#### este ejemplo llama a los atributos de clarados height y width. 
#### Y se les asigna individualemte al aplicarlo un valor de 500px y 50px
<!-- SE DECLARA -->
@mixin sizes($width, $height) {
   height: $height;
   width: $width;
}
<!-- SE APLICA -->
.box {
      @include sizes(500px, 50px);
}
<!-- RESULTADO -->
.box {
      height: 50px;
      width: 500px;
}
### ------MIXIN SIN PARÁMETRO------------
#### sin parámetro para llamar directamente a los valores declarados en el mixin
#### este ejemplo llama a los valores flex, row y center
<!-- SE DECLARA -->
@mixin flex-row-center{
	display: flex;
	flex-direction: row;
	justify-content: center;
}
<!-- SE APLICA -->
.box {
   @include flex-row-center;
}
<!-- RESULTADO -->
.box {
	display: flex;
	flex-direction: row;
	justify-content: center;
}

